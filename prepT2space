#!/bin/bash
# prepT2space: preprocessing for 3D T2 SPACE data (7T Siemens scanner)
#   initial version prototyped by jclau and yxiao
#
# testdir: ~/graham/GitHub/prepT2space/sandbox

# test command line on graham (regularInteractive --> neurogliaMincShell): ~/GitHub/prepT2space/prepT2space ~/projects/rrg-akhanf/cfmm-bids/Khan/SNSX_7T/derivatives/gradcorrect/ ./interactive_job/ participant --participant_label sub-C016

function die {
 echo $1 >&2
 exit 1
}

matching_T2w=
participant_label=
matching_T1w=
n_cpus=8

if [ "$#" -lt 2 ]
then
 echo "Usage: prepT2space bids_dir output_dir {participant,group} <optional arguments>"
 echo "          [--participant_label PARTICIPANT_LABEL [PARTICIPANT_LABEL...]]"
 echo "          [--matching_T2w MATCHING_PATTERN"
 echo "          [--matching_T1w MATCHING_STRING"
 echo "          [--n_cpus] NCPUS (not used currently; default: 8) "
 echo ""
 exit 1
fi


in_bids=$1 
out_folder=$2 
analysis_level=$3


shift 4


######################################################################################
# parameter initialization
######################################################################################
while :; do
      case $1 in
     -h|-\?|--help)
	     usage
            exit
              ;;
     --n_cpus )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                n_cpus=$2
                  shift
	      else
              die 'error: "--n_cpus" requires a non-empty option argument.'
            fi
              ;;

     --participant_label )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                participant_label=$2
                  shift
	      else
              die 'error: "--participant" requires a non-empty option argument.'
            fi
              ;;
     --participant_label=?*)
          participant_label=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --participant_label=)         # handle the case of an empty --participant=
         die 'error: "--participant_label" requires a non-empty option argument.'
          ;;
     --matching_T2w )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                matching_T2w=$2
                  shift
	      else
              die 'error: "--matching_T2w" requires a non-empty option argument.'
            fi
              ;;
     --matching_T2w=?*)
          matching_T2w=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --matching_T2w=)         # handle the case of an empty --acq=
         die 'error: "--matching_T2w" requires a non-empty option argument.'
          ;;
     --matching_T1w )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                matching_T1w=$2
                  shift
	      else
              die 'error: "--matching_T1w" requires a non-empty option argument.'
            fi
              ;;
     --matching_T1w=?*)
          matching_T1w=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --matching_T1w=)         # handle the case of an empty --acq=
         die 'error: "--matching_T2w" requires a non-empty option argument.'
          ;;


      -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
              ;;
     *)               # Default case: No more options, so break out of the loop.
          break
    esac
  
 shift
  done


shift $((OPTIND-1))


echo matching_T2w=$matching_T2w
echo participant_label=$participant_label

if [ -e $in_bids ]
then
	in_bids=`realpath $in_bids`
else
	echo "ERROR: bids_dir $in_bids does not exist!"
	exit 1
fi


if [ "$analysis_level" = "participant" ]
then
 echo " running participant level analysis"
 else
  echo "only participant level analysis is enabled"
  exit 0
fi

participants=$in_bids/participants.tsv

work_folder=$out_folder/work
derivatives=$out_folder #bids derivatives

echo mkdir -p $work_folder $derivatives
mkdir -p $work_folder $derivatives

pushd $work_folder
echo $participants

if [ -n "$matching_T2w" ]
then
  searchstring_T2w=\*${matching_T2w}\*SPACE*T2w.nii*
else
  searchstring_T2w=*SPACE*T2w.nii*
fi

if [ -n "$matching_T1w" ]
then
  searchstring_T1w=\*${matching_T1w}\*MP2RAGE*T1w.nii*
  searchstring_T1w_brainmask=\*${matching_T1w}\*MP2RAGE*T1w_brainmask.nii*
else
  searchstring_T1w=*MP2RAGE*T1w.nii*
  searchstring_T1w_brainmask=*MP2RAGE*T1w_brainmask.nii*
fi

if [ -n "$participant_label" ]
then
subjlist=`echo $participant_label | sed  's/,/\ /g'` 
else
subjlist=`tail -n +2 $participants | awk '{print $1}'`
fi

for subj in $subjlist 
do

######################################################################################
# variable initialization (template: prepdwi)
######################################################################################

#add on sub- if not exists
if [ ! "${subj:0:4}" = "sub-" ]
then
  subj="sub-$subj"
fi

subj_work_dir=$work_folder/$subj/
subj_final_dir=$derivatives/$subj/anat

mkdir -p $subj_work_dir # for intermediate files
mkdir -p $subj_final_dir # for final output

# Input T1w
N_T1w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T1w} | wc -l`
T1w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T1w} | head -n 1` # default is the first in the list
echo N_T1w=$N_T1w
echo Found $N_T1w matching T1w, using all:
eval ls $in_bids/$subj/anat/${subj}${searchstring_T1w}

# Input T2w
N_T2w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w} | wc -l`
T2w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w} | head -n 1`
echo N_T2w=$N_T2w
echo Found $N_T2w matching T2w, using all: 
eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w}

######################################################################################
# core pipeline functionality
######################################################################################

#############
## outputs ##
#############

# for N4
T1w_N4=$subj_work_dir/${subj}_T1w_N4.nii.gz
T2w_N4=$subj_work_dir/${subj}_T2w_N4.nii.gz

# for BET
T1w_N4_bet_prefix=$subj_work_dir/${subj}_T1w_N4_bet
T2w_N4_bet_prefix=$subj_work_dir/${subj}_T2w_N4_bet
T1w_N4_bet=$subj_work_dir/${subj}_T1w_N4_bet.nii.gz
T2w_N4_bet=$subj_work_dir/${subj}_T2w_N4_bet.nii.gz
T1w_N4_bet_mask=$subj_work_dir/${subj}_T1w_N4_bet_mask.nii.gz
#T2w_N4_bet_mask=$subj_work_dir/${subj}_T2w_N4_bet_mask.nii.gz

# for T1<->T2 registration and masks
T1w_to_T2w=$subj_work_dir/${subj}_T1w_to_T2w.nii.gz
T1w_to_T2w_mat=$subj_work_dir/${subj}_T1w_to_T2w.mat
T1w_to_T2w_mask=$subj_work_dir/${subj}_T1w_to_T2w_bet_mask.nii.gz
T1w_to_T2w_mask_dil4=$subj_work_dir/${subj}_T1w_to_T2w_bet_mask_dil4.nii.gz
T1w_to_T2w_mask_dil4_blur=$subj_work_dir/${subj}_T1w_to_T2w_bet_mask_dil4_blur.nii.gz
T2w_to_T1w_mat=$subj_work_dir/${subj}_T2w_to_T1w.mat

# T1w + T2w
T1w_to_T2w_combined=$subj_work_dir/${subj}_T1w_to_T2w_combined.nii.gz
T1w_to_T2w_combined_scaled=$subj_work_dir/${subj}_T1w_to_T2w_combined_scaled.nii.gz
T1w_to_T2w_combined_scaled_N4=$subj_work_dir/${subj}_T1w_to_T2w_combined_scaled_N4.nii.gz
T1w_to_T2w_combined_scaled_N4_biasfield=$subj_work_dir/${subj}_T1w_to_T2w_combined_scaled_N4_biasfield.nii.gz

# MINC files
T2w_mnc=$subj_work_dir/${subj}_T2w.mnc
T2w_mnc_nlm=$subj_work_dir/${subj}_T2w_nlm.mnc
T2w_nlm=$subj_work_dir/${subj}_T2w_nlm.nii.gz

# Final processed images T2->T1
T2w_to_T1w_proc1=$subj_work_dir/${subj}_T2w_proc1.nii.gz
T2w_to_T1w_proc2=$subj_work_dir/${subj}_T2w_proc2.nii.gz
T2w_to_T1w_proc1_mnc=$subj_work_dir/${subj}_T2w_proc1.mnc
T2w_to_T1w_proc2_mnc=$subj_work_dir/${subj}_T2w_proc2.mnc
T2w_to_T1w_proc_mnc=$subj_work_dir/${subj}_T2w_proc.mnc
T2w_to_T1w_proc=$subj_work_dir/${subj}_T2w_proc.nii.gz

#####################################################################################

# Brain mask estimation with T1w and generate masked image
echo "Step 1. Brain mask estimation with bet2"
N4BiasFieldCorrection -d 3 -b [200] -s 4 -c [600x400x300x200x20,0] -i $T1w -o $T1w_N4 -v
fsl5.0-bet2 $T1w_N4 $T1w_N4_bet_prefix -f 0.15 -w 1.1 -m

# Rough inhomogeneity correction for T2w
echo "Step 2. Rough N4 inhomogeneity correction for T2w MRI"
N4BiasFieldCorrection -d 3 -b [200] -s 4 -c [600x400x300x200x20,0] -i $T2w -o $T2w_N4 -v

# Register T1 to T2 MRI
echo "Step 3. Register T1 to T2 MRI"
fsl5.0-flirt -ref $T2w_N4 -out $T1w_to_T2w -in $T1w  -omat $T1w_to_T2w_mat -dof 6 -cost normmi
fsl5.0-flirt -ref $T2w_N4 -out $T1w_to_T2w_mask -in $T1w_N4_bet_mask -init $T1w_to_T2w_mat -interp nearestneighbour -applyxfm

# Process the masks
ImageMath 3 $T1w_to_T2w_mask_dil4 MD $T1w_to_T2w_mask 4
ImageMath 3 $T1w_to_T2w_mask_dil4_blur G $T1w_to_T2w_mask_dil4 1

# Combine the T2 and transformed T1 image
echo "Step 4. Combining T2w MRI and transformed T1w MRI for N4 correction"
ImageMath 3 $T1w_to_T2w_combined m $T1w_to_T2w.nii.gz $T2w # multiply
ImageMath 3 $T1w_to_T2w_combined_scaled / $T1w_to_T2w_combined 4000 # divide (scale)
N4BiasFieldCorrection -d 3 -i $T1w_to_T2w_combined_scaled -o [$T1w_to_T2w_combined_scaled_N4,$T1w_to_T2w_combined_scaled_N4_biasfield] -b [250] -r 0 -s 4 -c [600x500x500x400x200,1e-5] -v -x $T1w_to_T2w_mask_dil4

# Convert T1w and T2w to MINC format, and denoise T2w MRI
echo "Step 5. Nonlocal-means denoise for T2w MRI"
nii2mnc $T2w $T2w_mnc
mincnlm $T2w_mnc $T2w_mnc_nlm
mnc2nii -short -nii $T2w_mnc_nlm $T2w_nlm

# Apply inhomogeneity field
echo "Step 6. Apply obtained inhomogeneity field to denoised T2w MRI"
ImageMath 3 $T2w_N4 / $T2w_nlm $T1w_to_T2w_combined_scaled_N4_biasfield

# Register T2 to T1 and fuse
echo "Step 7. Refine T2w to T1w rigid registration with processed images"
fsl5.0-flirt -in $T2w_N4 -ref $T1w_N4_bet -omat $T2w_to_T1w_mat -dof 6 -cost normmi
fsl5.0-flirt -in $T2w_N4 -out $T2w_to_T1w_proc1 -ref $T1w -init $T2w_to_T1w_mat -interp spline -noclamp -applyxfm
fsl5.0-flirt -in $T2w_N4 -out $T2w_to_T1w_proc2 -ref $T1w -init $T2w_to_T1w_mat -noclamp -applyxfm

nii2mnc $T2w_to_T1w_proc1 $T2w_to_T1w_proc1_mnc
nii2mnc $T2w_to_T1w_proc2 $T2w_to_T1w_proc2_mnc
minccalc -expr "A[0]>=0?A[0]:A[1]" $T2w_to_T1w_proc1_mnc $T2w_to_T1w_proc2_mnc $T2w_to_T1w_proc_mnc -short
mnc2nii -short -nii $T2w_to_T1w_proc_mnc $T2w_to_T1w_proc

######################################################################################
# final file copies
######################################################################################

#copy original T1 to the output folders TODO
echo "Step 8. Move processing results to output folder and clean up"
#yes | cp -rf $basename-T1.nii.gz $output_path/$basename'_'N4_T1w.nii.gz
#yes | cp -rf $basename-T2-to-T1-proc.nii.gz $output_path/$basename'_'denoiseN4reg2T1w_T2w.nii.gz
#yes | cp -rf $basename-T2-N4.nii.gz $output_path/$basename'_'denoiseN4_T2w.nii.gz
#yes | cp -rf $basename-T2_to_T1.mat $output_path/$basename'_'T2toT1_rigid_xfm.mat
#yes | cp -rf $basename-T1-bet_mask.nii.gz $output_path/$basename'_'T1bet2_brainmask.nii.gz
#yes | cp -rf $basename-T2-biasfield.nii.gz $output_path/$basename'_'T2_N4biasfield.nii.gz

#clean up,flagging removing the entire work_directory or not
#rm $basename-T1.nii.gz  $basename-T2-to-T1-proc.nii.gz $basename-T2-N4.nii.gz  $basename-T2_to_T1.mat $basename-T1-bet_mask.nii.gz $basename-T1-bet_mask.nii.gz $basename-T2-biasfield.nii.gz
#rm $basename-T2-to-T1-proc1.nii.gz $basename-T2-to-T1-proc2.nii.gz $basename-T2-to-T1-proc.mnc $basename-T2-to-T1-proc1-copy.mnc $basename-T2-to-T1-proc2-copy.mnc

# copy final files to appropriate derivatives folder
# some string parsing
#T1w_fullpath=${T1w%/*}
#T1w_fullpath_file_no_nii=${T1w%.nii*}
#T1w_file_no_nii=${T1w_fullpath_file_no_nii##*/}

#T2w_fullpath=${T2w%/*}
#T2w_fullpath_file_no_nii=${T2w%.nii*}
#T2w_file_no_nii=${T2w_fullpath_file_no_nii##*/}

#echo cp $T2w_N4 $subj_final_dir/${T2w_file_no_nii}_preproc.nii.gz # T2w: N4 without masking
#echo cp $T2w_N4_roughbrain $subj_final_dir/${T2w_file_no_nii}_preproc_roughbrain.nii.gz # T2w: N4 + rough brain masked
#echo cp $T2w_to_T1w_N4_roughbrain $subj_final_dir/${T2w_file_no_nii}_preproc_space-T1w_roughbrain.nii.gz # T2w: N4 + rough brain mask in T1w space
#echo cp $T1w_roughbrain $subj_final_dir/${T1w_file_no_nii}_roughbrain.nii.gz # T1w: rough brain masked

done

popd

exit 0
