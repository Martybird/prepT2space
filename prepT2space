#!/bin/bash
# prepT2space: preprocessing for 3D T2 SPACE data (7T Siemens scanner)
# dependencies: fmriprep as input dir (for T1w brain mask)

function die {
 echo $1 >&2
 exit 1
}

matching_T2w=
participant_label=
matching_T1w=
n_cpus=8

if [ "$#" -lt 3 ]
then
 echo "Usage: prepT2space bids_dir fmriprep_dir output_dir {participant,group} <optional arguments>"
 echo "          [--participant_label PARTICIPANT_LABEL [PARTICIPANT_LABEL...]]"
 echo "          [--matching_T2w MATCHING_PATTERN"
 echo "          [--matching_T1w MATCHING_STRING"
 echo "          [--n_cpus] NCPUS (not used currently; default: 8) "
 echo ""
 exit 1
fi


in_bids=$1 
in_fmriprep=$2
out_folder=$3 
analysis_level=$4


shift 4



while :; do
      case $1 in
     -h|-\?|--help)
	     usage
            exit
              ;;
     --n_cpus )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                n_cpus=$2
                  shift
	      else
              die 'error: "--n_cpus" requires a non-empty option argument.'
            fi
              ;;

     --participant_label )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                participant_label=$2
                  shift
	      else
              die 'error: "--participant" requires a non-empty option argument.'
            fi
              ;;
     --participant_label=?*)
          participant_label=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --participant_label=)         # handle the case of an empty --participant=
         die 'error: "--participant_label" requires a non-empty option argument.'
          ;;
     --matching_T2w )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                matching_T2w=$2
                  shift
	      else
              die 'error: "--matching_T2w" requires a non-empty option argument.'
            fi
              ;;
     --matching_T2w=?*)
          matching_T2w=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --matching_T2w=)         # handle the case of an empty --acq=
         die 'error: "--matching_T2w" requires a non-empty option argument.'
          ;;
     --matching_T1w )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                matching_T1w=$2
                  shift
	      else
              die 'error: "--matching_T1w" requires a non-empty option argument.'
            fi
              ;;
     --matching_T1w=?*)
          matching_T1w=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --matching_T1w=)         # handle the case of an empty --acq=
         die 'error: "--matching_T2w" requires a non-empty option argument.'
          ;;


      -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
              ;;
     *)               # Default case: No more options, so break out of the loop.
          break
    esac
  
 shift
  done


shift $((OPTIND-1))


echo matching_T2w=$matching_T2w
echo participant_label=$participant_label

if [ -e $in_bids ]
then
	in_bids=`realpath $in_bids`
else
	echo "ERROR: bids_dir $in_bids does not exist!"
	exit 1
fi


if [ "$analysis_level" = "participant" ]
then
 echo " running participant level analysis"
 else
  echo "only participant level analysis is enabled"
  exit 0
fi

T2w_prefix=uncorrected

participants=$in_bids/participants.tsv

work_folder=$out_folder/work
derivatives=$out_folder #bids derivatives

echo mkdir -p $work_folder $derivatives
#mkdir -p $work_folder $derivatives

pushd $work_folder
echo $participants

if [ -n "$matching_T2w" ]
then
  searchstring_T2w=\*${matching_T2w}\*SPACE*DIS3D*T2w.nii* # default is DIS3D version
else
  searchstring_T2w=*SPACE*DIS3D*T2w.nii*
fi

if [ -n "$matching_T1w" ]
then
  searchstring_t1w=\*${matching_T1w}\*MP2RAGE*DIS3D*T1w.nii* # default is DIS3D version
  searchstring_t1w_brainmask=\*${matching_T1w}\*MP2RAGE*DIS3D*T1w_brainmask.nii* # default is DIS3D version
else
  searchstring_t1w=*MP2RAGE*DIS3D*T1w.nii*
  searchstring_t1w_brainmask=*MP2RAGE*DIS3D*T1w_brainmask.nii*
fi



if [ -n "$participant_label" ]
then
subjlist=`echo $participant_label | sed  's/,/\ /g'` 
else
subjlist=`tail -n +2 $participants | awk '{print $1}'`
fi

for subj in $subjlist 
do

#add on sub- if not exists
if [ ! "${subj:0:4}" = "sub-" ]
then
  subj="sub-$subj"
fi

N_t1w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_t1w} | wc -l`
in_t1w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_t1w} | head -n 1` # default is the first in the list

echo N_t1w=$N_t1w
echo Found $N_t1w matching T1w, using all:
 eval ls $in_bids/$subj/anat/${subj}${searchstring_t1w}

NT2w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w} | wc -l`

 echo NT2w=$NT2w
echo Found $NT2w matching T2w, using all: 
 eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w}

N_brainmask=`eval ls $in_fmriprep/fmriprep/$subj/anat/${subj}${searchstring_t1w_brainmask} | wc -l`
in_brainmask=`eval ls $in_fmriprep/fmriprep/$subj/anat/${subj}${searchstring_t1w_brainmask} | head -n 1`

echo N_brainmask=$N_brainmask
echo Found $N_brainmask matching T1w_brainmask, using all:
 eval ls $in_fmriprep/fmriprep/$subj/anat/${subj}${searchstring_t1w_brainmask}

# testdir: ~/graham/GitHub/prepT2space/sandbox
# dilate brain mask for T1w (rough brain mask)
# register T1w to T2w -rigOnly -nac
  # reg_aladin -ref sub-C012_acq-MP2RAGE_rec-DIS3D_T1w.nii.gz -flo sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w.nii.gz -aff SPACE_to_MP2RAGE_1.xfm -res SPACE_to_MP2RAGE_1.nii.gz -rigOnly -nac
# also calculate inverted transform reg_transform -invAff input.xfm output.xfm
  # reg_resample -ref sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w.nii.gz -flo sub-C012_acq-MP2RAGE_rec-DIS3D_1w.nii.gz -trans MP2RAGE_to_SPACE_1.xfm -res MP2RAGE_to_SPACE_1.nii.gz -inter 0
# transform dilated brain mask to T2w space
  # reg_resample -ref sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w.nii.gz -flo sub-C012_acq-MP2RAGE_rec-DIS3D_T1w_brainmask_dil5_dil5_dil5_dil5.nii.gz -trans MP2RAGE_to_SPACE_1.xfm -res sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_brainmask_rough.nii.gz -inter 0
# nonuniformity correction for T2w (see below for parameters)
  # N4BiasFieldCorrection -d 3 -r 1 -x sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_brainmask_rough.nii.gz -b [350] -c [500x500x400x400x400,0] -i sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w.nii.gz -o sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4.nii.gz -v
# get T2 brain mask from bet using N4 settings here
  # bet sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4.nii.gz sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet.nii.gz -f 0.2 -g 0.2 -v
# binarize the mask (or automatically create with -m flag)
  # fslmaths sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet.nii.gz -bin sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet_brainmask.nii.gz
# resample T2w mask into T1w space
  # reg_resample -ref sub-C012_acq-MP2RAGE_rec-DIS3D_T1w.nii.gz -flo sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet_brainmask.nii.gz -aff SPACE_to_MP2RAGE_1.xfm -res SPACE_to_MP2RAGE_1_brainmask.nii.gz -inter 0 
# use union of T1w and T2w masks for best masking
  # good idea but ultimately still seems to fail in the same areas
# copy final files to appropriate derivatives folder

done


popd
