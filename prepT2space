#!/bin/bash
# prepT2space: preprocessing for 3D T2 SPACE data (7T Siemens scanner)

function die {
 echo $1 >&2
 exit 1
}

matching_T2w=
participant_label=
matching_T1w=
n_cpus=8

if [ "$#" -lt 3 ]
then
 echo "Usage: prepT2space bids_dir fmriprep_dir output_dir {participant,group} <optional arguments>"
 echo "          [--participant_label PARTICIPANT_LABEL [PARTICIPANT_LABEL...]]"
 echo "          [--matching_T2w MATCHING_PATTERN"
 echo "          [--matching_T1w MATCHING_STRING"
 echo "          [--n_cpus] NCPUS (not used currently; default: 8) "
 echo ""
 exit 1
fi


in_bids=$1 
out_folder=$2 
analysis_level=$3


shift 4


######################################################################################
# parameter initialization (template: prepdwi)
######################################################################################
while :; do
      case $1 in
     -h|-\?|--help)
	     usage
            exit
              ;;
     --n_cpus )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                n_cpus=$2
                  shift
	      else
              die 'error: "--n_cpus" requires a non-empty option argument.'
            fi
              ;;

     --participant_label )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                participant_label=$2
                  shift
	      else
              die 'error: "--participant" requires a non-empty option argument.'
            fi
              ;;
     --participant_label=?*)
          participant_label=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --participant_label=)         # handle the case of an empty --participant=
         die 'error: "--participant_label" requires a non-empty option argument.'
          ;;
     --matching_T2w )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                matching_T2w=$2
                  shift
	      else
              die 'error: "--matching_T2w" requires a non-empty option argument.'
            fi
              ;;
     --matching_T2w=?*)
          matching_T2w=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --matching_T2w=)         # handle the case of an empty --acq=
         die 'error: "--matching_T2w" requires a non-empty option argument.'
          ;;
     --matching_T1w )       # takes an option argument; ensure it has been specified.
          if [ "$2" ]; then
                matching_T1w=$2
                  shift
	      else
              die 'error: "--matching_T1w" requires a non-empty option argument.'
            fi
              ;;
     --matching_T1w=?*)
          matching_T1w=${1#*=} # delete everything up to "=" and assign the remainder.
            ;;
          --matching_T1w=)         # handle the case of an empty --acq=
         die 'error: "--matching_T2w" requires a non-empty option argument.'
          ;;


      -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
              ;;
     *)               # Default case: No more options, so break out of the loop.
          break
    esac
  
 shift
  done


shift $((OPTIND-1))


echo matching_T2w=$matching_T2w
echo participant_label=$participant_label

if [ -e $in_bids ]
then
	in_bids=`realpath $in_bids`
else
	echo "ERROR: bids_dir $in_bids does not exist!"
	exit 1
fi


if [ "$analysis_level" = "participant" ]
then
 echo " running participant level analysis"
 else
  echo "only participant level analysis is enabled"
  exit 0
fi

participants=$in_bids/participants.tsv

work_folder=$out_folder/work
derivatives=$out_folder #bids derivatives

echo mkdir -p $work_folder $derivatives
mkdir -p $work_folder $derivatives

pushd $work_folder
echo $participants

if [ -n "$matching_T2w" ]
then
  searchstring_T2w=\*${matching_T2w}\*SPACE*T2w.nii*
else
  searchstring_T2w=*SPACE*T2w.nii*
fi

if [ -n "$matching_T1w" ]
then
  searchstring_T1w=\*${matching_T1w}\*MP2RAGE*T1w.nii*
  searchstring_T1w_brainmask=\*${matching_T1w}\*MP2RAGE*T1w_brainmask.nii*
else
  searchstring_T1w=*MP2RAGE*T1w.nii*
  searchstring_T1w_brainmask=*MP2RAGE*T1w_brainmask.nii*
fi

if [ -n "$participant_label" ]
then
subjlist=`echo $participant_label | sed  's/,/\ /g'` 
else
subjlist=`tail -n +2 $participants | awk '{print $1}'`
fi

for subj in $subjlist 
do

######################################################################################
# variable initialization (template: prepdwi)
######################################################################################

#add on sub- if not exists
if [ ! "${subj:0:4}" = "sub-" ]
then
  subj="sub-$subj"
fi

subj_work_dir=$work_folder/$subj/
subj_final_dir=$derivatives/$subj/anat

mkdir -p $subj_work_dir # for intermediate files
mkdir -p $subj_final_dir # for final output

# Input T1w
N_T1w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T1w} | wc -l`
in_T1w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T1w} | head -n 1` # default is the first in the list
echo N_T1w=$N_T1w
echo Found $N_T1w matching T1w, using all:
eval ls $in_bids/$subj/anat/${subj}${searchstring_T1w}

# Input T2w
N_T2w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w} | wc -l`
in_T2w=`eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w} | head -n 1`
echo N_T2w=$N_T2w
echo Found $N_T2w matching T2w, using all: 
eval ls $in_bids/$subj/anat/${subj}${searchstring_T2w}

# Input T1w brainmask (from fmriprep) # TODO replace
N_brainmask=`eval ls $in_fmriprep/fmriprep/$subj/anat/${subj}${searchstring_T1w_brainmask} | wc -l`
in_brainmask=`eval ls $in_fmriprep/fmriprep/$subj/anat/${subj}${searchstring_T1w_brainmask} | head -n 1`
echo N_brainmask=$N_brainmask
echo Found $N_brainmask matching T1w_brainmask, using all:
eval ls $in_fmriprep/fmriprep/$subj/anat/${subj}${searchstring_T1w_brainmask}

# testdir: ~/graham/GitHub/prepT2space/sandbox
# test command line on graham: ~/GitHub/prepT2space/prepT2space ~/projects/rrg-akhanf/akhanf/cfmm-bids/data/Khan/SNSX_7T/ ~/project/bids/SNSX_7T/derivatives/fmriprep-1.0.4/ ~/project/bids/SNSX_7T/derivatives/prepT2space_test/ participant --participant_label sub-C016

######################################################################################
# core pipeline functionality
######################################################################################

# dilate brain mask for T1w
# NOTE: brainmask from fmriprep suboptimal currently as not meant for 7T data
#   Thus, using rough dilated brain mask for now
dil5x1=$subj_work_dir/T1w_brainmask_dil5x1.nii.gz
dil5x2=$subj_work_dir/T1w_brainmask_dil5x2.nii.gz
dil5x3=$subj_work_dir/T1w_brainmask_dil5x3.nii.gz
dil5x4=$subj_work_dir/T1w_brainmask_dil5x4.nii.gz
T1w_roughbrain=$subj_work_dir/T1w_roughbrain.nii.gz

echo fslmaths $in_brainmask -bin -kernel boxv 5 -dilM $dil5x1
fslmaths $in_brainmask -bin -kernel boxv 5 -dilM $dil5x1
echo fslmaths $dil5x1 -bin -kernel boxv 5 -dilM $dil5x2
fslmaths $dil5x1 -bin -kernel boxv 5 -dilM $dil5x2
echo fslmaths $dil5x2 -bin -kernel boxv 5 -dilM $dil5x3
fslmaths $dil5x2 -bin -kernel boxv 5 -dilM $dil5x3
echo fslmaths $dil5x3 -bin -kernel boxv 5 -dilM $dil5x4
fslmaths $dil5x3 -bin -kernel boxv 5 -dilM $dil5x4
echo fslmaths $in_T1w -mul $dil5x4 $T1w_roughbrain
fslmaths $in_T1w -mul $dil5x4 $T1w_roughbrain

# register T1w to T2w -rigOnly -nac
T2w_to_T1w_rigid_xfm=$subj_work_dir/T2w_to_T1w_rigid.xfm
T2w_to_T1w_rigid_nii=$subj_work_dir/T2w_to_T1w_rigid.nii.gz
T1w_to_T2w_rigid_xfm=$subj_work_dir/T1w_to_T2w_rigid.xfm
T1w_to_T2w_rigid_nii=$subj_work_dir/T1w_to_T2w_rigid.nii.gz

echo reg_aladin -ref $in_T1w -flo $in_T2w -aff $T2w_to_T1w_rigid_xfm -res $T2w_to_T1w_rigid_nii -rigOnly -nac
reg_aladin -ref $in_T1w -flo $in_T2w -aff $T2w_to_T1w_rigid_xfm -res $T2w_to_T1w_rigid_nii -rigOnly -nac

# also calculate inverted transform reg_transform -invAffine input.xfm output.xfm
# legacy version of niftyreg; flags have changed with recent updates
echo reg_transform -invAffine $T2w_to_T1w_rigid_xfm $T1w_to_T2w_rigid_xfm
reg_transform -ref $in_T1w -invAffine $T2w_to_T1w_rigid_xfm $T1w_to_T2w_rigid_xfm
echo reg_resample -ref $in_T2w -flo $in_T1w -aff $T1w_to_T2w_rigid_xfm -res $T1w_to_T2w_rigid_nii -NN 0
reg_resample -ref $in_T2w -flo $in_T1w -aff $T1w_to_T2w_rigid_xfm -res $T1w_to_T2w_rigid_nii -NN 0

# transform dilated brain mask to T2w space
T2w_rough_mask=$subj_work_dir/T2w_rough_brainmask.nii.gz
echo reg_resample -ref $in_T2w -flo $dil5x4 -aff $T1w_to_T2w_rigid_xfm -res $T2w_rough_mask -NN 0
reg_resample -ref $in_T2w -flo $dil5x4 -aff $T1w_to_T2w_rigid_xfm -res $T2w_rough_mask -NN 0

# nonuniformity correction for T2w (recommended settings by YX) and brain mask
# not sure there is any point in keeping the non masked region as bet with mask input results in sharp intensity differences at boundary of mask
T2w_N4=$subj_work_dir/T2w_N4.nii.gz
T2w_N4_roughbrain=$subj_work_dir/T2w_N4_roughbrain.nii.gz
echo N4BiasFieldCorrection -d 3 -r 1 -x $T2w_rough_mask -b [350] -c [500x500x400x400x400,0] -i $in_T2w -o $T2w_N4 -v
N4BiasFieldCorrection -d 3 -r 1 -x $T2w_rough_mask -b [350] -c [500x500x400x400x400,0] -i $in_T2w -o $T2w_N4 -v
echo fslmaths $T2w_N4 -mul $T2w_rough_mask $T2w_N4_roughbrain
fslmaths $T2w_N4 -mul $T2w_rough_mask $T2w_N4_roughbrain

# resample T2w roughbrain to T1w space
T2w_to_T1w_N4_roughbrain=$subj_work_dir/T2w_to_T1w_N4_roughbrain.nii.gz
echo reg_resample -ref $in_T1w -flo $T2w_N4_roughbrain -aff $T2w_to_T1w_rigid_xfm -res $T2w_to_T1w_N4_roughbrain -NN 0
reg_resample -ref $in_T1w -flo $T2w_N4_roughbrain -aff $T2w_to_T1w_rigid_xfm -res $T2w_to_T1w_N4_roughbrain -NN 0

######################################################################################
# future considerations
#
# TODO: consider redoing T2->T1 registration with the idea that the brain masking might make this even more optimal
# TODO: consider using N4 corrected version to generate "better" T2 mask. Idea is to union optimal T2 with T1 mask for better masking
#   seems to be failing in the same areas in practice though
# get T2 brain mask from bet using N4 settings here (unfortunately not perfect due to intensity inhomogeneity)
  # bet sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4.nii.gz sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet.nii.gz -f 0.2 -g 0.2 -v
# binarize the mask (or automatically create with -m flag)
  # fslmaths sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet.nii.gz -bin sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet_brainmask.nii.gz
# resample T2w mask into T1w space
  # reg_resample -ref sub-C012_acq-MP2RAGE_rec-DIS3D_T1w.nii.gz -flo sub-C012_acq-SPACE_rec-DIS3D_run-01_T2w_N4_bet_brainmask.nii.gz -aff SPACE_to_MP2RAGE_1.xfm -res SPACE_to_MP2RAGE_1_brainmask.nii.gz -inter 0 
# use union of T1w and T2w masks for best masking
  # good idea but ultimately still seems to fail in the same areas
######################################################################################

######################################################################################
# final file copies
######################################################################################

# copy final files to appropriate derivatives folder
# some string parsing
T1w_fullpath=${in_T1w%/*}
T1w_fullpath_file_no_nii=${in_T1w%.nii*}
T1w_file_no_nii=${T1w_fullpath_file_no_nii##*/}

T2w_fullpath=${in_T2w%/*}
T2w_fullpath_file_no_nii=${in_T2w%.nii*}
T2w_file_no_nii=${T2w_fullpath_file_no_nii##*/}

echo cp $T2w_N4 $subj_final_dir/${T2w_file_no_nii}_preproc.nii.gz # T2w: N4 without masking
echo cp $T2w_N4_roughbrain $subj_final_dir/${T2w_file_no_nii}_preproc_roughbrain.nii.gz # T2w: N4 + rough brain masked
echo cp $T2w_to_T1w_N4_roughbrain $subj_final_dir/${T2w_file_no_nii}_preproc_space-T1w_roughbrain.nii.gz # T2w: N4 + rough brain mask in T1w space
echo cp $T1w_roughbrain $subj_final_dir/${T1w_file_no_nii}_roughbrain.nii.gz # T1w: rough brain masked

done


popd
